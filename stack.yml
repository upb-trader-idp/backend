version: '3.9'

services:

  kong:
    image: kong:3.6
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PLUGINS=bundled,prometheus
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - kong_net
      - auth_net
      - db_interaction_net
      - finance_net
      - monitoring_net
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - monitoring_net
      - kong_net
    restart: unless-stopped
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
    ports:
      - "3000:3000"
    networks:
      - monitoring_net
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  db_service:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: main_db
    volumes:
      - main_data:/var/lib/postgresql/data
      - ./init_main_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auth_net
      - db_interaction_net
      - business_logic_net
      - adminer_net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  auth_service:
    image: alexlicuriceanu/trader_idp_auth_service:latest
    ports:
      - "8002:8002"
    environment:
      - MAIN_DB_URL=postgresql://postgres:postgres@db_service:5432/main_db
      - JWT_SECRET=supersecret
      - JWT_ALGORITHM=HS256
    networks:
      - auth_net
      - monitoring_net
    deploy:
      replicas: 3

  db_interaction_service:
    image: alexlicuriceanu/trader_idp_db_interaction_service:latest
    ports:
      - "8003:8003"
    environment:
      - MAIN_DB_URL=postgresql://postgres:postgres@db_service:5432/main_db
      - JWT_SECRET=supersecret
      - JWT_ALGORITHM=HS256
    networks:
      - db_interaction_net
      - monitoring_net
    deploy:
      replicas: 3

  business_logic_service:
    image: alexlicuriceanu/trader_idp_business_logic_service:latest
    environment:
      - MAIN_DB_URL=postgresql://postgres:postgres@db_service:5432/main_db
    networks:
      - business_logic_net
      - monitoring_net
    deploy:
      replicas: 1

  finance_service:
    image: alexlicuriceanu/trader_idp_finance_service:latest
    ports:
      - "8004:8004"
    networks:
      - finance_net
      - monitoring_net
    deploy:
      replicas: 3

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - adminer_net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - monitoring_net
    restart: unless-stopped
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  main_data:
  prometheus_data:
  grafana_data:
  portainer_data:

networks:
  auth_net:
  db_interaction_net:
  business_logic_net:
  adminer_net:
  finance_net:
  kong_net:
  monitoring_net:
